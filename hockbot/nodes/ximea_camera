#!/usr/bin/env python2
from ximea import xiapi

import cv2

from camera_info_manager import CameraInfoManager, CameraInfoMissingError
import cv_bridge
import rospy
from sensor_msgs.msg import Image
from sensor_msgs.msg import CameraInfo


def main(camera_name='ximea_camera'):

    rospy.init_node(camera_name)
    cam_info = CameraInfoManager(camera_name, namespace=camera_name)
    try:
        cam_info.loadCameraInfo()
    except IOError as ex:
        rospy.logwarn('Camera Info not able to be loaded')
    cam = xiapi.Camera()
    cam.open_device()
    cam.set_imgdataformat('XI_MONO8')
    cam.set_exposure(5000)
    cam.set_gain(6.0)

    img = xiapi.Image()
    cam.start_acquisition()

    bridge = cv_bridge.CvBridge()
    img_pub = rospy.Publisher(
        '/{}/image_raw'.format(camera_name),
        Image,
        queue_size=1)
    info_pub = rospy.Publisher(
        '/{}/camera_info'.format(camera_name),
        CameraInfo,
        queue_size=1)
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        cam.get_image(img)
        cv_img = img.get_image_data_numpy()
        cap_time = rospy.Time.now()
        # opencv_img = cv2.CreateMat(cv_img.shape[0], cv_img.shape[1], cv2.CV_8IC1)
        ros_img = bridge.cv2_to_imgmsg(cv_img, 'mono8')
        ros_img.header.stamp = cap_time
        img_pub.publish(ros_img)
        try:
            cam_info_msg = cam_info.getCameraInfo()
            cam_info_msg.header.stamp = cap_time
            info_pub.publish(cam_info_msg)
        except CameraInfoMissingError:
            pass
        rate.sleep()
    cam.stop_acquisition()
    cam.close_device()


if __name__ == '__main__':
    main()
