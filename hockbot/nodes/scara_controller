#!/usr/bin/env python

import rospy
from hockbot.srv import (
    MoveCart,
)
from sensor_msgs.msg import JointState

import actionlib
from hebiros.msg import (
    TrajectoryAction,
    TrajectoryGoal,
    WaypointMsg,
)
from hockbot.scara_kinematics import ikin
from hockbot.inverse_dynamics import plan_trajectory


class ScaraController(object):

    def __init__(self):
        self._hebi_commander = rospy.Publisher(
            '/hebiros/robot/command/joint_state',
            JointState,
            queue_size=1)

        self._cur_pos = rospy.wait_for_message(
            '/hebiros/robot/feedback/joint_state',
            JointState)
        self._pos_sub = rospy.Subscriber(
            '/hebiros/robot/feedback/joint_state',
            JointState,
            self._pos_cb)
        self._cart_srv = rospy.Service(
            '~/move_cart',
            MoveCart,
            self._move_cart_cb
            )

    def _pos_cb(self, msg):
        self._cur_pos = msg

    def _move_cart_cb(self, req):
        print(req)
        theta_1, theta_2 = ikin(req.x, req.y)[0]
        goal_state = JointState(
            name=['Scara/0', 'Scara/1'],
            position=[theta_1, -theta_2])
        traj = plan_trajectory(self._cur_pos, goal_state)
        self._send_hebi_traj(traj, 0.01)

    def _send_hebi_traj(self, joint_states, dt):
        goal = TrajectoryGoal(waypoints=[], times=[])
        t = dt
        for j in joint_states:
            waypoint_msg = WaypointMsg(
                names=j.name,
                positions=j.position,
                velocities=j.velocity,
                accelerations=j.effort)
            goal.waypoints.append(waypoint_msg)
            goal.times.append(t)
            t += dt
        client = actionlib.SimpleActionClient('/hebiros/robot/trajectory', TrajectoryAction)
        client.wait_for_server()
        client.send_goal(goal)
        client.wait_for_result()


def main():
    rospy.init_node('scara_controller')
    controller = ScaraController()
    rospy.spin()


if __name__ == '__main__':
    main()
