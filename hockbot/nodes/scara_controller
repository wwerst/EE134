#!/usr/bin/env python
import numpy as np
from threading import Lock

import rospy
from hockbot.srv import (
    MoveCart,
    MoveJoint,
)
from sensor_msgs.msg import JointState

import actionlib
from hebiros.msg import (
    TrajectoryAction,
    TrajectoryGoal,
    WaypointMsg,
)
from hockbot.msg import PositionVelocityStamped
from hockbot.scara_kinematics import (
    ikin,
    fkin,
    jacobian,
)
from hockbot.inverse_dynamics import plan_trajectory
from hockbot.puck_dynamics import intersect_line_segment_polygon
from hockbot.utils import limit_array, remap_joint_state


class ScaraController(object):

    def __init__(self):
        self._hebi_commander = rospy.Publisher(
            '/hebiros/scara/command/joint_state',
            JointState,
            queue_size=1)

        cur_jnt_state = rospy.wait_for_message(
            '/hebiros/scara/feedback/joint_state',
            JointState)
        self._cur_jnt_angles = remap_joint_state(cur_jnt_state, ['Scara/0', 'Scara/1']).position
        print(self._cur_jnt_angles)
        print(fkin(*self._cur_jnt_angles))
        # self._joint_srv = rospy.Service(
        #     '~/move_joint',
        #     MoveJoint,
        #     self._move_joint_cb
        #     )
        # self._cart_srv = rospy.Service(
        #     '~/move_cart',
        #     MoveCart,
        #     self._move_cart_cb
        #     )
        self._lock = Lock()
        self._dt = 0.01
        self._last_time = rospy.Time.now().to_sec()
        self._cur_pos = fkin(*self._cur_jnt_angles)
        self._cur_acc = np.array([0., 0.])
        self._cur_vel = np.array([0., 0.])
        self._cmd_pos = None
        self._control_loop = rospy.Timer(
            rospy.Duration(self._dt),
            self._control_loop_cb)
        self._puck_vec_sub = rospy.Subscriber(
            '/puck_predicter/positionvelocity',
            PositionVelocityStamped,
            self._puck_vec_cb)

    def _puck_vec_cb(self, msg):
        triangle_defense_poly = np.array(
            [[0.535, 0.3],
             [0.665, 0.5],
             [0.795, 0.3]])
        puck_pos = np.array([msg.position.x, msg.position.y])
        puck_vel = np.array([msg.velocity.x, msg.velocity.y])
        nearest_intersect = intersect_line_segment_polygon(
            np.array([puck_pos, puck_pos+puck_vel*1.0]),
            triangle_defense_poly)
        with self._lock:
            if nearest_intersect is not None:
                self._cmd_pos = nearest_intersect
            else:
                self._cmd_pos = triangle_defense_poly[1]

    def _control_loop_cb(self, _):
        print(self._cmd_pos)
        if self._cmd_pos is None:
            return
        dt = rospy.Time.now().to_sec() - self._last_time
        self._last_time += dt
        command_msg = JointState()
        command_msg.name = ['Scara/0', 'Scara/1']
        time_constant = 0.1      # Convergence time constant
        lam = 1.0/time_constant   # Convergence rate
        damping = 2.0
        max_acc = 100.0
        max_velocity = 10.0              # Velocity magnitude limit
        with self._lock:
            self._cur_acc = - 1.4 * damping * lam * self._cur_vel - lam * lam * (self._cur_pos - self._cmd_pos)
            self._cur_acc = limit_array(self._cur_acc, max_acc)
            self._cur_vel += dt * self._cur_acc
            # Apply velocity limits
            self._cur_vel = limit_array(self._cur_vel, max_velocity)

            self._cur_pos += dt * self._cur_vel
            self._cur_jnt_angles = self._calculate_ikin_nearest(self._cur_pos, self._cur_jnt_angles)
            self._cur_pos = fkin(*self._cur_jnt_angles)
            command_msg.position = self._cur_jnt_angles
            command_msg.velocity = np.array([0.0]*len(self._cur_pos)) # self._cur_vel
            command_msg.effort = np.array([0.0]*len(self._cur_pos))
            command_msg.header.stamp = rospy.Time.now()
        self._hebi_commander.publish(command_msg)

    def _move_cart_cb(self, req):
        assert req.move_time > 0.2, 'move_time too small'
        if req.joint_space_interp:
            theta_1, theta_2 = ikin(req.x, req.y)[0]
            goal_state = JointState(
                name=['Scara/0', 'Scara/1'],
                position=[theta_1, theta_2])
            traj = plan_trajectory(self._cur_pos, goal_state, req.move_time)
        else:
            traj = self.plan_cartesian(np.array([req.x, req.y]), req.move_time)
        self._send_hebi_command_traj(traj, 0.01)
        return True

    # def _move_joint_cb(self, req):
    #     assert req.move_time > 0.2, 'move_time too small'
    #     goal_state = JointState(
    #         name=['Scara/0', 'Scara/1'],
    #         position=[req.theta1, req.theta2])
    #     traj = plan_trajectory(self._cur_pos, goal_state, req.move_time)
    #     self._send_hebi_command_traj(traj, 0.01)
    #     return True

    def _send_hebi_command_traj(self, joint_states, dt):
        """Sends a trajectory to robot by streaming to
        command topic."""
        rate = rospy.Rate(1.0/dt)
        for j in joint_states:
            self._hebi_commander.publish(j)
            rate.sleep()

    def plan_cartesian(self, goal_pos, goal_time=5.0, dt=0.01):
        cur_angles = self._cur_jnt_angles
        start_pos = fkin(*cur_angles)
        def interp_pos(fraction):
            print('start_pos: {}'.format(start_pos))
            print('goal_pos: {}'.format(goal_pos))
            return start_pos + (goal_pos - start_pos)*fraction
        positions = []
        for frac in np.linspace(0.0, 1.0, goal_time//dt):
            step_pos = interp_pos(frac)
            cur_angles = self._calculate_ikin_nearest(step_pos, cur_angles)
            jstate = JointState()
            jstate.name = ['Scara/0', 'Scara/1']
            jstate.position = cur_angles
            jstate.velocity = [0, 0]
            jstate.effort = [0, 0]
            positions.append(jstate)
        return positions

    def _calculate_ikin_nearest(self, pos, cur_angles):
        solution_angles = ikin(*pos)
        if solution_angles is None:
            print('Ikin failure')
            return cur_angles
        angle_delta = np.linalg.norm(
            solution_angles - cur_angles, axis=1)
        # HACK(WHW):
        min_index = 0 if angle_delta[0] < angle_delta[1] else 1
        return solution_angles[min_index]


def main():
    rospy.init_node('scara_controller')
    controller = ScaraController()
    rospy.spin()


if __name__ == '__main__':
    main()
